# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - main

env:
  S3_BUCKET_NAME: smashbeserverbucket
  RESOURCE_PATH: ./src/main/resources/application-prod.yml
  CODE_DEPLOY_APPLICATION_NAME: smash-be-server-code-deploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: smash-be-server

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v2

      # (2) JDK 11 세팅
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Set yaml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}
        env:
          spring.datasource.url.RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
          spring.datasource.url.RDS_PORT: ${{ secrets.RDS_PORT }}
          spring.datasource.url.RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
          spring.datasource.username.RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          spring.datasource.username.RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

        # (3) Gradle build
      - name: Build with Gradle
        run: ./gradlew clean build
        shell: bash

        # (4) 실행 파일 압축
      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash

        # (5) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

        # (6) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip

        # (7) S3 버킷에 있는 실행 파일을 EC2 서버로 배포
      - name: Code Deploy
        run: |
          aws deploy create-deployment \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip